
031-517-201.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000017  00800100  00800100  00000630  2**0
                  ALLOC
  2 .stab         00001e18  00000000  00000000  00000630  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011f7  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	c6 c2       	rjmp	.+1420   	; 0x5a4 <__vector_11>
  18:	46 c2       	rjmp	.+1164   	; 0x4a6 <__vector_12>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	b9 c2       	rjmp	.+1394   	; 0x590 <__vector_14>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	2a c1       	rjmp	.+596    	; 0x27a <__vector_18>
  26:	94 c1       	rjmp	.+808    	; 0x350 <__vector_19>
  28:	bb c1       	rjmp	.+886    	; 0x3a0 <__vector_20>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a7 31       	cpi	r26, 0x17	; 23
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	11 d0       	rcall	.+34     	; 0x74 <main>
  52:	b2 c2       	rjmp	.+1380   	; 0x5b8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <SendKey>:

  This routine sends a key press event over the RS485 link.
 */
void SendKey(Uint8 Key)
{
  TxBuf[BCPAddr] = (BCAKeypadController << 4) | BCAMP3Contoller;
  56:	90 e1       	ldi	r25, 0x10	; 16
  58:	90 93 01 01 	sts	0x0101, r25
  TxBuf[BCPType] = BCTKey;
  5c:	97 e0       	ldi	r25, 0x07	; 7
  5e:	90 93 02 01 	sts	0x0102, r25
  TxBuf[BCPParam1] = Key;
  62:	80 93 03 01 	sts	0x0103, r24
  TxBuf[BCPParam2] = 0;
  66:	10 92 04 01 	sts	0x0104, r1
  BCMessageSend(TxBuf, true);           // Send the reply
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	91 e0       	ldi	r25, 0x01	; 1
  6e:	61 e0       	ldi	r22, 0x01	; 1
  70:	ae d0       	rcall	.+348    	; 0x1ce <BCMessageSend>
}
  72:	08 95       	ret

00000074 <main>:

  Program entry point
 */
//int main(void) __attribute__((noreturn)); // Main never returns so don't waste stack space on it.
int main(void)
{
  74:	8f 92       	push	r8
  76:	9f 92       	push	r9
  78:	af 92       	push	r10
  7a:	bf 92       	push	r11
  7c:	cf 92       	push	r12
  7e:	df 92       	push	r13
  80:	ef 92       	push	r14
  82:	ff 92       	push	r15
  84:	0f 93       	push	r16
  86:	1f 93       	push	r17
  88:	df 93       	push	r29
  8a:	cf 93       	push	r28
  8c:	00 d0       	rcall	.+0      	; 0x8e <main+0x1a>
  8e:	00 d0       	rcall	.+0      	; 0x90 <main+0x1c>
  90:	00 d0       	rcall	.+0      	; 0x92 <main+0x1e>
  92:	cd b7       	in	r28, 0x3d	; 61
  94:	de b7       	in	r29, 0x3e	; 62
  Uint8   NewKey;


  // Set up the I/O lines

  DDRB = PortDirB;
  96:	87 e0       	ldi	r24, 0x07	; 7
  98:	84 b9       	out	0x04, r24	; 4
  DDRC = PortDirC;
  9a:	17 b8       	out	0x07, r1	; 7
  DDRD = PortDirD;
  9c:	84 ef       	ldi	r24, 0xF4	; 244
  9e:	8a b9       	out	0x0a, r24	; 10

  PINB = PortPullUpB;
  a0:	13 b8       	out	0x03, r1	; 3
  PINC = PortPullUpC;
  a2:	8f e3       	ldi	r24, 0x3F	; 63
  a4:	86 b9       	out	0x06, r24	; 6
  PIND = PortPullUpD;
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	89 b9       	out	0x09, r24	; 9

  // Init the periphials

  SetLamp(0);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	cf d1       	rcall	.+926    	; 0x44c <SetLamp>
  Timer_Init();                               // Set up timers
  ae:	e1 d1       	rcall	.+962    	; 0x472 <Timer_Init>

  sei();    // Enable global interrupts
  b0:	78 94       	sei
  }
   */

  // Final set up

  BCMessageInit(BCAKeypadController);         // Set up the UART
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	71 d0       	rcall	.+226    	; 0x198 <BCMessageInit>
  BCMessageReceive(RxBuf);                    // Kick off receive
  b6:	7e 01       	movw	r14, r28
  b8:	08 94       	sec
  ba:	e1 1c       	adc	r14, r1
  bc:	f1 1c       	adc	r15, r1
  be:	c7 01       	movw	r24, r14
  c0:	ce d0       	rcall	.+412    	; 0x25e <BCMessageReceive>
  c2:	0e ef       	ldi	r16, 0xFE	; 254
  c4:	1f ef       	ldi	r17, 0xFF	; 255

  PowerOnTest = true;
  Phase       = 0;
  RetryTime   = 0;
  RetryCount  = 0;
  OldKey      = 0;
  c6:	bb 24       	eor	r11, r11
  // Final set up

  BCMessageInit(BCAKeypadController);         // Set up the UART
  BCMessageReceive(RxBuf);                    // Kick off receive

  PowerOnTest = true;
  c8:	aa 24       	eor	r10, r10
  ca:	a3 94       	inc	r10
  Phase       = 0;
  RetryTime   = 0;
  RetryCount  = 0;
  cc:	cc 24       	eor	r12, r12
  BCMessageInit(BCAKeypadController);         // Set up the UART
  BCMessageReceive(RxBuf);                    // Kick off receive

  PowerOnTest = true;
  Phase       = 0;
  RetryTime   = 0;
  ce:	dd 24       	eor	r13, r13
            TxBuf[BCPParam2] = RxBuf[BCPType];
            BCMessageSend(TxBuf, true);           // Send the reply
            break;
        }
      }
      BCMessageReceive(RxBuf);    // Kick off receive of next frame
  d0:	9e 2c       	mov	r9, r14
            TxBuf[BCPParam2] = 0;
            BCMessageSend(TxBuf, true);           // Send the reply
            break;

          default:  // Unknown command
            TxBuf[BCPType]   = BCTNAck;
  d2:	ee 24       	eor	r14, r14
  d4:	e3 94       	inc	r14
  d6:	03 c0       	rjmp	.+6      	; 0xde <main+0x6a>
   */

  // Final set up

  BCMessageInit(BCAKeypadController);         // Set up the UART
  BCMessageReceive(RxBuf);                    // Kick off receive
  d8:	01 50       	subi	r16, 0x01	; 1
  da:	10 40       	sbci	r17, 0x00	; 0

  Program entry point
 */
//int main(void) __attribute__((noreturn)); // Main never returns so don't waste stack space on it.
int main(void)
{
  dc:	c8 2c       	mov	r12, r8


  // Enter the main loop

  for( ; ; ) {  // Run forever
    DelayMS(LoopRate);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	40 d2       	rcall	.+1152   	; 0x564 <DelayMS>
      ClearBit(LEDLogoPort, LEDLogo);
#endif

    // Look for new commands

    if (BCRXAvail) {     // We have a new message
  e4:	80 91 07 01 	lds	r24, 0x0107
  e8:	88 23       	and	r24, r24
  ea:	89 f1       	breq	.+98     	; 0x14e <main+0xda>
      if ((RxBuf[BCPAddr] & 0b1111) == BCAKeypadController)  { // Check it is for us
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	98 2f       	mov	r25, r24
  f0:	9f 70       	andi	r25, 0x0F	; 15
  f2:	91 30       	cpi	r25, 0x01	; 1
  f4:	49 f5       	brne	.+82     	; 0x148 <main+0xd4>
        Destination    = RxBuf[BCPAddr] >> 4;  // Preset up assuming we will reply
        Destination    &= 0b1111;
  f6:	82 95       	swap	r24
  f8:	8f 70       	andi	r24, 0x0F	; 15
        Destination    |= BCAKeypadController << 4;
  fa:	80 61       	ori	r24, 0x10	; 16
        TxBuf[BCPAddr] = Destination;
  fc:	80 93 01 01 	sts	0x0101, r24
        DelayMS(2);                         // Allow line turn around delay
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	2f d2       	rcall	.+1118   	; 0x564 <DelayMS>
        switch (RxBuf[BCPType]) {
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	f1 f0       	breq	.+60     	; 0x148 <main+0xd4>
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	d8 f0       	brcs	.+54     	; 0x146 <main+0xd2>
 110:	86 30       	cpi	r24, 0x06	; 6
 112:	71 f4       	brne	.+28     	; 0x130 <main+0xbc>
          case BCTNAck: // Negative acknowledge
            break;

          case BCTLamps: // Set lamps
            PowerOnTest = false;
            SetLamps(RxBuf[BCPParam1]);
 114:	8c 81       	ldd	r24, Y+4	; 0x04
 116:	76 d1       	rcall	.+748    	; 0x404 <SetLamps>
            TxBuf[BCPType]   = BCTAck;
 118:	10 92 02 01 	sts	0x0102, r1
            TxBuf[BCPParam1] = 0;
 11c:	10 92 03 01 	sts	0x0103, r1
            TxBuf[BCPParam2] = 0;
 120:	10 92 04 01 	sts	0x0104, r1
            BCMessageSend(TxBuf, true);           // Send the reply
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	51 d0       	rcall	.+162    	; 0x1ce <BCMessageSend>

          case BCTNAck: // Negative acknowledge
            break;

          case BCTLamps: // Set lamps
            PowerOnTest = false;
 12c:	aa 24       	eor	r10, r10
            SetLamps(RxBuf[BCPParam1]);
            TxBuf[BCPType]   = BCTAck;
            TxBuf[BCPParam1] = 0;
            TxBuf[BCPParam2] = 0;
            BCMessageSend(TxBuf, true);           // Send the reply
            break;
 12e:	0c c0       	rjmp	.+24     	; 0x148 <main+0xd4>

          default:  // Unknown command
            TxBuf[BCPType]   = BCTNAck;
 130:	e0 92 02 01 	sts	0x0102, r14
            TxBuf[BCPParam1] = BCNUnkownType;
 134:	10 92 03 01 	sts	0x0103, r1
            TxBuf[BCPParam2] = RxBuf[BCPType];
 138:	80 93 04 01 	sts	0x0104, r24
            BCMessageSend(TxBuf, true);           // Send the reply
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	45 d0       	rcall	.+138    	; 0x1ce <BCMessageSend>
            break;
 144:	01 c0       	rjmp	.+2      	; 0x148 <main+0xd4>
        Destination    |= BCAKeypadController << 4;
        TxBuf[BCPAddr] = Destination;
        DelayMS(2);                         // Allow line turn around delay
        switch (RxBuf[BCPType]) {
          case BCTAck:                      // An ack of our key event
            RetryTime = 0;                  // They got it so cancel retry counter
 146:	dd 24       	eor	r13, r13
            TxBuf[BCPParam2] = RxBuf[BCPType];
            BCMessageSend(TxBuf, true);           // Send the reply
            break;
        }
      }
      BCMessageReceive(RxBuf);    // Kick off receive of next frame
 148:	89 2d       	mov	r24, r9
 14a:	9f 2d       	mov	r25, r15
 14c:	88 d0       	rcall	.+272    	; 0x25e <BCMessageReceive>
    }

    // Look for change of key state

    if (!RetryTime) {           // Don't send a new key while waiting for the last one to be acknowledged
 14e:	dd 20       	and	r13, r13
 150:	49 f4       	brne	.+18     	; 0x164 <main+0xf0>
      NewKey = GetKey();
 152:	3a d1       	rcall	.+628    	; 0x3c8 <GetKey>
 154:	88 2e       	mov	r8, r24
      if (NewKey != OldKey) {                                   // If change of key state
 156:	8b 15       	cp	r24, r11
 158:	89 f0       	breq	.+34     	; 0x17c <main+0x108>
        //    if ((NewKey != OldKey) &&                                   // If change of key state
        //        (RetryTime < (RetryTimePeriod - KeyDebouncePeriod))) {  // and not too soon after the last one (debounce)
        SendKey(NewKey);
 15a:	7d df       	rcall	.-262    	; 0x56 <SendKey>
 15c:	b8 2c       	mov	r11, r8
        RetryTime = RetryTimePeriod;
        RetryCount = 0;
 15e:	cc 24       	eor	r12, r12
      NewKey = GetKey();
      if (NewKey != OldKey) {                                   // If change of key state
        //    if ((NewKey != OldKey) &&                                   // If change of key state
        //        (RetryTime < (RetryTimePeriod - KeyDebouncePeriod))) {  // and not too soon after the last one (debounce)
        SendKey(NewKey);
        RetryTime = RetryTimePeriod;
 160:	2a ef       	ldi	r18, 0xFA	; 250
 162:	d2 2e       	mov	r13, r18
    }

    // Handle retry of key message

    if (RetryTime)
      if (!--RetryTime) {
 164:	da 94       	dec	r13
 166:	51 f4       	brne	.+20     	; 0x17c <main+0x108>
        if (RetryCount++ < 3) {
 168:	8c 2c       	mov	r8, r12
 16a:	83 94       	inc	r8
 16c:	8c 2d       	mov	r24, r12
 16e:	83 30       	cpi	r24, 0x03	; 3
 170:	30 f4       	brcc	.+12     	; 0x17e <main+0x10a>
          SendKey(OldKey);
 172:	8b 2d       	mov	r24, r11
 174:	70 df       	rcall	.-288    	; 0x56 <SendKey>
          RetryTime = RetryTimePeriod;
 176:	9a ef       	ldi	r25, 0xFA	; 250
 178:	d9 2e       	mov	r13, r25
 17a:	01 c0       	rjmp	.+2      	; 0x17e <main+0x10a>
    }

    // Handle retry of key message

    if (RetryTime)
      if (!--RetryTime) {
 17c:	8c 2c       	mov	r8, r12
        }
      }

    // Test LEDs

    if (PowerOnTest) {
 17e:	aa 20       	and	r10, r10
 180:	09 f4       	brne	.+2      	; 0x184 <main+0x110>
 182:	aa cf       	rjmp	.-172    	; 0xd8 <main+0x64>
      SetLamp((~Phase >> 7) & 0b111);   // Rotate clockwise, the negate makes this opposite of what 031-517-202 does
 184:	98 01       	movw	r18, r16
 186:	22 0f       	add	r18, r18
 188:	23 2f       	mov	r18, r19
 18a:	22 1f       	adc	r18, r18
 18c:	33 0b       	sbc	r19, r19
 18e:	31 95       	neg	r19
 190:	82 2f       	mov	r24, r18
 192:	87 70       	andi	r24, 0x07	; 7
 194:	5b d1       	rcall	.+694    	; 0x44c <SetLamp>
 196:	a0 cf       	rjmp	.-192    	; 0xd8 <main+0x64>

00000198 <BCMessageInit>:
  This routine prepares for board to board communications.  It is passed the
  address to use for sending
 */
void BCMessageInit(Uint8 OurAddress)
{
  ClearBit(RS485DEPort, RS485DE);       // Turn off RS485 driver
 198:	5c 98       	cbi	0x0b, 4	; 11
  BCRXAvail = false;
 19a:	10 92 07 01 	sts	0x0107, r1
  BCTXBusy  = false;
 19e:	10 92 09 01 	sts	0x0109, r1
  BCTXPos   = 0;
 1a2:	10 92 0a 01 	sts	0x010A, r1
  BCRXPos   = 0;
 1a6:	10 92 06 01 	sts	0x0106, r1
  RXBuf     = NULL;
 1aa:	10 92 0c 01 	sts	0x010C, r1
 1ae:	10 92 0b 01 	sts	0x010B, r1
  BCOurAddress = OurAddress;
 1b2:	80 93 08 01 	sts	0x0108, r24

  UBRR1H = (uint8) BaudRate1 >> 8;          // Set the baud rate
 1b6:	10 92 c5 00 	sts	0x00C5, r1
  UBRR1L = (uint8) BaudRate1;
 1ba:	8f e1       	ldi	r24, 0x1F	; 31
 1bc:	80 93 c4 00 	sts	0x00C4, r24

//  UCSR1B = (1 << RXEN1) | (1 << TXEN1) | (1<<RXCIE1) | (1<<TXCIE1); // Enable UART RX, TX, RX interrupt and TX complete interrupt
  UCSR1B = (1 << RXEN1) | (1 << TXEN1) | (1<<TXCIE1); // Enable UART RX, TX, RX interrupt and TX complete interrupt
 1c0:	88 e5       	ldi	r24, 0x58	; 88
 1c2:	80 93 c1 00 	sts	0x00C1, r24
  UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);   // Set up as 8N1
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	80 93 c2 00 	sts	0x00C2, r24
}
 1cc:	08 95       	ret

000001ce <BCMessageSend>:
  This routine will send a board comms message.  If busy it will wait before
  sending.  It will fill in the header, sender and checksum.  The user callers
  should set up destination address, type and parameters.
 */
void BCMessageSend(Uint8 *TxMsg, bool WaitForSend)
{
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	df 93       	push	r29
 1d4:	cf 93       	push	r28
 1d6:	0f 92       	push	r0
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	8c 01       	movw	r16, r24
    UART_TxStr("BCMessageSend BCTXBusy\r\n");
  if (BCRXPos)
    UART_TxStr("BCMessageSend BCRXPos\r\n");
#endif

  while(BCTXBusy || BCRXPos);  // Wait for last TX to complete and RX idle
 1de:	80 91 09 01 	lds	r24, 0x0109
 1e2:	88 23       	and	r24, r24
 1e4:	e1 f7       	brne	.-8      	; 0x1de <BCMessageSend+0x10>
 1e6:	80 91 06 01 	lds	r24, 0x0106
 1ea:	88 23       	and	r24, r24
 1ec:	c1 f7       	brne	.-16     	; 0x1de <BCMessageSend+0x10>
#ifdef  SecondUART
#ifdef DumpComms
  UART_TxStr("BCMessageSend 01 ");
#endif
#endif
  TxMsg[BCPSOH]  = SOH;
 1ee:	f8 01       	movw	r30, r16
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	81 93       	st	Z+, r24
  TxMsg[BCPAddr] = (TxMsg[BCPAddr] & 0b00001111) | (BCOurAddress << 4);
 1f4:	d8 01       	movw	r26, r16
 1f6:	11 96       	adiw	r26, 0x01	; 1
 1f8:	9c 91       	ld	r25, X
 1fa:	11 97       	sbiw	r26, 0x01	; 1
 1fc:	9f 70       	andi	r25, 0x0F	; 15
 1fe:	80 91 08 01 	lds	r24, 0x0108
 202:	82 95       	swap	r24
 204:	80 7f       	andi	r24, 0xF0	; 240
 206:	89 2b       	or	r24, r25
 208:	11 96       	adiw	r26, 0x01	; 1
 20a:	8c 93       	st	X, r24
 20c:	11 97       	sbiw	r26, 0x01	; 1
 20e:	94 e0       	ldi	r25, 0x04	; 4
  Checksum = SOH;
 210:	81 e0       	ldi	r24, 0x01	; 1
  for (Pos = BCPAddr; Pos < BCPChecksum; Pos++) {
    Checksum += TxMsg[Pos];
 212:	21 91       	ld	r18, Z+
 214:	82 0f       	add	r24, r18
 216:	91 50       	subi	r25, 0x01	; 1
#endif
#endif
  TxMsg[BCPSOH]  = SOH;
  TxMsg[BCPAddr] = (TxMsg[BCPAddr] & 0b00001111) | (BCOurAddress << 4);
  Checksum = SOH;
  for (Pos = BCPAddr; Pos < BCPChecksum; Pos++) {
 218:	e1 f7       	brne	.-8      	; 0x212 <BCMessageSend+0x44>
    UART_TxUint8(TxMsg[Pos]);
    UART_TxChar(' ');
#endif
#endif
  }
  TxMsg[BCPChecksum] = Checksum;
 21a:	f8 01       	movw	r30, r16
 21c:	85 83       	std	Z+5, r24	; 0x05
#endif
#endif

  // Send it

  SetBit (RS485DEPort, RS485DE);      // Turn on RS485 driver
 21e:	5c 9a       	sbi	0x0b, 4	; 11
  DelayMS(1);
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	69 83       	std	Y+1, r22	; 0x01
 226:	9e d1       	rcall	.+828    	; 0x564 <DelayMS>
  BCTXBusy = true;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 09 01 	sts	0x0109, r24
  TXBuf    = TxMsg;  // Set up the buffer and kick off the actual transmission
 22e:	10 93 0e 01 	sts	0x010E, r17
 232:	00 93 0d 01 	sts	0x010D, r16
  BCTXPos  = 0;
 236:	10 92 0a 01 	sts	0x010A, r1
  UCSR1B   |= (1<<UDRIE1);  // Enable UDRE and TXC interrupts
 23a:	80 91 c1 00 	lds	r24, 0x00C1
 23e:	80 62       	ori	r24, 0x20	; 32
 240:	80 93 c1 00 	sts	0x00C1, r24

  if(WaitForSend)
 244:	69 81       	ldd	r22, Y+1	; 0x01
 246:	66 23       	and	r22, r22
 248:	21 f0       	breq	.+8      	; 0x252 <BCMessageSend+0x84>
    while(BCTXBusy);  // Wait for last TX to complete
 24a:	80 91 09 01 	lds	r24, 0x0109
 24e:	88 23       	and	r24, r24
 250:	e1 f7       	brne	.-8      	; 0x24a <BCMessageSend+0x7c>
}
 252:	0f 90       	pop	r0
 254:	cf 91       	pop	r28
 256:	df 91       	pop	r29
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <BCMessageReceive>:

  This routine will allow the reception a board comms message.
 */
void BCMessageReceive(Uint8 *RxMsg)
{
  BCRXPos   = 0;
 25e:	10 92 06 01 	sts	0x0106, r1
  RXBuf     = RxMsg;
 262:	90 93 0c 01 	sts	0x010C, r25
 266:	80 93 0b 01 	sts	0x010B, r24
  BCRXAvail = false;
 26a:	10 92 07 01 	sts	0x0107, r1
  UCSR1B |= 1 << RXCIE1;
 26e:	e1 ec       	ldi	r30, 0xC1	; 193
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	80 68       	ori	r24, 0x80	; 128
 276:	80 83       	st	Z, r24
}
 278:	08 95       	ret

0000027a <__vector_18>:
  USART1 receive interrupt routine

  This routine will handle a receive interrupt.
 */
ISR(USART1_RX_vect)
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	3f 93       	push	r19
 288:	4f 93       	push	r20
 28a:	8f 93       	push	r24
 28c:	9f 93       	push	r25
 28e:	af 93       	push	r26
 290:	bf 93       	push	r27
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
  Uint8 RxData;
  Uint8 Checksum;
  Uint8 Pos;

  RxData = UDR1;  // Get the incoming byte
 296:	40 91 c6 00 	lds	r20, 0x00C6

  if ((RXBuf != NULL) && (BCRXPos < BCMsgSize) && !BCRXAvail) {
 29a:	80 91 0b 01 	lds	r24, 0x010B
 29e:	90 91 0c 01 	lds	r25, 0x010C
 2a2:	00 97       	sbiw	r24, 0x00	; 0
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <__vector_18+0x2e>
 2a6:	46 c0       	rjmp	.+140    	; 0x334 <__stack+0x35>
 2a8:	20 91 06 01 	lds	r18, 0x0106
 2ac:	26 30       	cpi	r18, 0x06	; 6
 2ae:	08 f0       	brcs	.+2      	; 0x2b2 <__vector_18+0x38>
 2b0:	41 c0       	rjmp	.+130    	; 0x334 <__stack+0x35>
 2b2:	20 91 07 01 	lds	r18, 0x0107
 2b6:	22 23       	and	r18, r18
 2b8:	e9 f5       	brne	.+122    	; 0x334 <__stack+0x35>
    RS485RXTimeout = 2;
 2ba:	22 e0       	ldi	r18, 0x02	; 2
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	30 93 12 01 	sts	0x0112, r19
 2c2:	20 93 11 01 	sts	0x0111, r18
    RXBuf[BCRXPos] = RxData;
 2c6:	20 91 06 01 	lds	r18, 0x0106
 2ca:	82 0f       	add	r24, r18
 2cc:	91 1d       	adc	r25, r1
 2ce:	fc 01       	movw	r30, r24
 2d0:	40 83       	st	Z, r20
    if (!((BCRXPos == BCPSOH) && (RxData != SOH))) { // Check for bad start of frame
 2d2:	80 91 06 01 	lds	r24, 0x0106
 2d6:	88 23       	and	r24, r24
 2d8:	11 f4       	brne	.+4      	; 0x2de <__vector_18+0x64>
 2da:	41 30       	cpi	r20, 0x01	; 1
 2dc:	59 f5       	brne	.+86     	; 0x334 <__stack+0x35>
      if (BCRXPos >= (BCMsgSize-1)) { // If end of frame reached
 2de:	80 91 06 01 	lds	r24, 0x0106
 2e2:	85 30       	cpi	r24, 0x05	; 5
 2e4:	10 f1       	brcs	.+68     	; 0x32a <__stack+0x2b>
        RS485RXTimeout = 0;     // stop interpacket timeout
 2e6:	10 92 12 01 	sts	0x0112, r1
 2ea:	10 92 11 01 	sts	0x0111, r1
/*
  USART1 receive interrupt routine

  This routine will handle a receive interrupt.
 */
ISR(USART1_RX_vect)
 2ee:	e0 91 0b 01 	lds	r30, 0x010B
 2f2:	f0 91 0c 01 	lds	r31, 0x010C
 2f6:	df 01       	movw	r26, r30
 2f8:	11 96       	adiw	r26, 0x01	; 1
 2fa:	94 e0       	ldi	r25, 0x04	; 4
    RS485RXTimeout = 2;
    RXBuf[BCRXPos] = RxData;
    if (!((BCRXPos == BCPSOH) && (RxData != SOH))) { // Check for bad start of frame
      if (BCRXPos >= (BCMsgSize-1)) { // If end of frame reached
        RS485RXTimeout = 0;     // stop interpacket timeout
        Checksum = SOH;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
        for (Pos = BCPAddr; Pos < BCPChecksum; Pos++)
          Checksum += RXBuf[Pos];
 2fe:	2d 91       	ld	r18, X+
 300:	82 0f       	add	r24, r18
 302:	91 50       	subi	r25, 0x01	; 1
    RXBuf[BCRXPos] = RxData;
    if (!((BCRXPos == BCPSOH) && (RxData != SOH))) { // Check for bad start of frame
      if (BCRXPos >= (BCMsgSize-1)) { // If end of frame reached
        RS485RXTimeout = 0;     // stop interpacket timeout
        Checksum = SOH;
        for (Pos = BCPAddr; Pos < BCPChecksum; Pos++)
 304:	e1 f7       	brne	.-8      	; 0x2fe <__vector_18+0x84>
          Checksum += RXBuf[Pos];
        if (Checksum == RxData) { // If checksum is good
 306:	84 17       	cp	r24, r20
 308:	69 f4       	brne	.+26     	; 0x324 <__stack+0x25>
          if ((RXBuf[BCPAddr] & 0b00001111) == BCOurAddress) {  // Check if for us
 30a:	81 81       	ldd	r24, Z+1	; 0x01
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	8f 70       	andi	r24, 0x0F	; 15
 310:	90 70       	andi	r25, 0x00	; 0
 312:	20 91 08 01 	lds	r18, 0x0108
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	82 17       	cp	r24, r18
 31a:	93 07       	cpc	r25, r19
 31c:	19 f4       	brne	.+6      	; 0x324 <__stack+0x25>
            BCRXAvail = true;       // then advise new frame is ready
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	80 93 07 01 	sts	0x0107, r24
#endif
          } else {
          }
        } else {
        }
        BCRXPos = 0;              // Let the transmit routines know we are not in frame
 324:	10 92 06 01 	sts	0x0106, r1
 328:	05 c0       	rjmp	.+10     	; 0x334 <__stack+0x35>
      } else {
        BCRXPos++;                // We saved a valid packet character so move on to next
 32a:	80 91 06 01 	lds	r24, 0x0106
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	80 93 06 01 	sts	0x0106, r24
      }
    } else {
    }
  }
}
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	bf 91       	pop	r27
 33a:	af 91       	pop	r26
 33c:	9f 91       	pop	r25
 33e:	8f 91       	pop	r24
 340:	4f 91       	pop	r20
 342:	3f 91       	pop	r19
 344:	2f 91       	pop	r18
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <__vector_19>:
  USART1 transmit interrupt routine

  This routine will handle a transmit interrupt.
 */
ISR(USART1_UDRE_vect)
{
 350:	1f 92       	push	r1
 352:	0f 92       	push	r0
 354:	0f b6       	in	r0, 0x3f	; 63
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	ef 93       	push	r30
 360:	ff 93       	push	r31
  if (BCTXPos < BCMsgSize) {  // If frame not complete
 362:	80 91 0a 01 	lds	r24, 0x010A
 366:	86 30       	cpi	r24, 0x06	; 6
 368:	68 f4       	brcc	.+26     	; 0x384 <__vector_19+0x34>
    UDR1 = TXBuf[BCTXPos];
 36a:	e0 91 0d 01 	lds	r30, 0x010D
 36e:	f0 91 0e 01 	lds	r31, 0x010E
 372:	e8 0f       	add	r30, r24
 374:	f1 1d       	adc	r31, r1
 376:	90 81       	ld	r25, Z
 378:	90 93 c6 00 	sts	0x00C6, r25
    BCTXPos++;
 37c:	8f 5f       	subi	r24, 0xFF	; 255
 37e:	80 93 0a 01 	sts	0x010A, r24
 382:	05 c0       	rjmp	.+10     	; 0x38e <__vector_19+0x3e>
  } else {
    UCSR1B &= ~(1<<UDRIE1);         // Disable UDRE interrupt
 384:	80 91 c1 00 	lds	r24, 0x00C1
 388:	8f 7d       	andi	r24, 0xDF	; 223
 38a:	80 93 c1 00 	sts	0x00C1, r24
  }
}
 38e:	ff 91       	pop	r31
 390:	ef 91       	pop	r30
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <__vector_20>:
  USART1 transmit interrupt complete routine

  This routine will handle a transmit complete interrupt.
 */
ISR(USART1_TX_vect)
{
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
  RS485TXDrop = 1;  // Set the transmit driver to turn off in 1mS
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	90 93 10 01 	sts	0x0110, r25
 3b6:	80 93 0f 01 	sts	0x010F, r24
}
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	0f 90       	pop	r0
 3c0:	0f be       	out	0x3f, r0	; 63
 3c2:	0f 90       	pop	r0
 3c4:	1f 90       	pop	r1
 3c6:	18 95       	reti

000003c8 <GetKey>:
  1 to n, or 0 if no key.
*/
#if HWVer == 1
Uint8 GetKey(void)
{
  if (!GetBit(Switch1to6InPin, Switch1In))
 3c8:	35 9b       	sbis	0x06, 5	; 6
 3ca:	0e c0       	rjmp	.+28     	; 0x3e8 <GetKey+0x20>
    return 1;

  if (!GetBit(Switch1to6InPin, Switch2In))
 3cc:	34 9b       	sbis	0x06, 4	; 6
 3ce:	0e c0       	rjmp	.+28     	; 0x3ec <GetKey+0x24>
    return 2;

  if (!GetBit(Switch1to6InPin, Switch3In))
 3d0:	33 9b       	sbis	0x06, 3	; 6
 3d2:	0e c0       	rjmp	.+28     	; 0x3f0 <GetKey+0x28>
    return 3;

  if (!GetBit(Switch1to6InPin, Switch4In))
 3d4:	32 9b       	sbis	0x06, 2	; 6
 3d6:	0e c0       	rjmp	.+28     	; 0x3f4 <GetKey+0x2c>
    return 4;

  if (!GetBit(Switch1to6InPin, Switch5In))
 3d8:	31 9b       	sbis	0x06, 1	; 6
 3da:	0e c0       	rjmp	.+28     	; 0x3f8 <GetKey+0x30>
    return 5;

  if (!GetBit(Switch1to6InPin, Switch6In))
 3dc:	30 9b       	sbis	0x06, 0	; 6
 3de:	0e c0       	rjmp	.+28     	; 0x3fc <GetKey+0x34>
    return 6;

  if (!GetBit(Switch7InPin, Switch7In))
 3e0:	4b 99       	sbic	0x09, 3	; 9
 3e2:	0e c0       	rjmp	.+28     	; 0x400 <GetKey+0x38>
    return 7;
 3e4:	87 e0       	ldi	r24, 0x07	; 7
 3e6:	08 95       	ret
*/
#if HWVer == 1
Uint8 GetKey(void)
{
  if (!GetBit(Switch1to6InPin, Switch1In))
    return 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	08 95       	ret

  if (!GetBit(Switch1to6InPin, Switch2In))
    return 2;
 3ec:	82 e0       	ldi	r24, 0x02	; 2
 3ee:	08 95       	ret

  if (!GetBit(Switch1to6InPin, Switch3In))
    return 3;
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	08 95       	ret

  if (!GetBit(Switch1to6InPin, Switch4In))
    return 4;
 3f4:	84 e0       	ldi	r24, 0x04	; 4
 3f6:	08 95       	ret

  if (!GetBit(Switch1to6InPin, Switch5In))
    return 5;
 3f8:	85 e0       	ldi	r24, 0x05	; 5
 3fa:	08 95       	ret

  if (!GetBit(Switch1to6InPin, Switch6In))
    return 6;
 3fc:	86 e0       	ldi	r24, 0x06	; 6
 3fe:	08 95       	ret

  if (!GetBit(Switch7InPin, Switch7In))
    return 7;

  return 0;
 400:	80 e0       	ldi	r24, 0x00	; 0
}
 402:	08 95       	ret

00000404 <SetLamps>:

  This routine sets the Lamps as a bit pattern.
*/
void SetLamps(Uint8 NewLamps)
{
  if(NewLamps & 0b1)
 404:	80 ff       	sbrs	r24, 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <SetLamps+0x8>
    ClearBit(LED1to3Port, LED1);
 408:	5d 98       	cbi	0x0b, 5	; 11
 40a:	01 c0       	rjmp	.+2      	; 0x40e <SetLamps+0xa>
  else
    SetBit(LED1to3Port, LED1);
 40c:	5d 9a       	sbi	0x0b, 5	; 11

  if(NewLamps & 0b10)
 40e:	81 ff       	sbrs	r24, 1
 410:	02 c0       	rjmp	.+4      	; 0x416 <SetLamps+0x12>
    ClearBit(LED1to3Port, LED2);
 412:	5e 98       	cbi	0x0b, 6	; 11
 414:	01 c0       	rjmp	.+2      	; 0x418 <SetLamps+0x14>
  else
    SetBit(LED1to3Port, LED2);
 416:	5e 9a       	sbi	0x0b, 6	; 11

  if(NewLamps & 0b100)
 418:	82 ff       	sbrs	r24, 2
 41a:	02 c0       	rjmp	.+4      	; 0x420 <SetLamps+0x1c>
    ClearBit(LED1to3Port, LED3);
 41c:	5f 98       	cbi	0x0b, 7	; 11
 41e:	01 c0       	rjmp	.+2      	; 0x422 <SetLamps+0x1e>
  else
    SetBit(LED1to3Port, LED3);
 420:	5f 9a       	sbi	0x0b, 7	; 11

  if(NewLamps & 0b1000)
 422:	83 ff       	sbrs	r24, 3
 424:	02 c0       	rjmp	.+4      	; 0x42a <SetLamps+0x26>
    ClearBit(LED4to7Port, LED4);
 426:	28 98       	cbi	0x05, 0	; 5
 428:	01 c0       	rjmp	.+2      	; 0x42c <SetLamps+0x28>
  else
    SetBit(LED4to7Port, LED4);
 42a:	28 9a       	sbi	0x05, 0	; 5

#ifndef DebugLamps
  if(NewLamps & 0b10000)
 42c:	84 ff       	sbrs	r24, 4
 42e:	02 c0       	rjmp	.+4      	; 0x434 <SetLamps+0x30>
    SetBit(LEDLogoPort, LEDLogo);
 430:	5a 9a       	sbi	0x0b, 2	; 11
 432:	01 c0       	rjmp	.+2      	; 0x436 <SetLamps+0x32>
  else
    ClearBit(LEDLogoPort, LEDLogo);
 434:	5a 98       	cbi	0x0b, 2	; 11
#endif

  if(NewLamps & 0b100000)
 436:	85 ff       	sbrs	r24, 5
 438:	02 c0       	rjmp	.+4      	; 0x43e <SetLamps+0x3a>
    SetBit(LED4to7Port, LED6);
 43a:	29 9a       	sbi	0x05, 1	; 5
 43c:	01 c0       	rjmp	.+2      	; 0x440 <SetLamps+0x3c>
  else
    ClearBit(LED4to7Port, LED6);
 43e:	29 98       	cbi	0x05, 1	; 5

  if(NewLamps & 0b1000000)
 440:	86 ff       	sbrs	r24, 6
 442:	02 c0       	rjmp	.+4      	; 0x448 <SetLamps+0x44>
    SetBit(LED4to7Port, LED7);
 444:	2a 9a       	sbi	0x05, 2	; 5
 446:	08 95       	ret
  else
    ClearBit(LED4to7Port, LED7);
 448:	2a 98       	cbi	0x05, 2	; 5
 44a:	08 95       	ret

0000044c <SetLamp>:

  This routine sets the Lamps.  0 = off, 1 to 8 for the lamp, all others off.
*/
void SetLamp(Uint8 Lamp)
{
  if ((Lamp > 0) && (Lamp <= 7))
 44c:	98 2f       	mov	r25, r24
 44e:	91 50       	subi	r25, 0x01	; 1
 450:	97 30       	cpi	r25, 0x07	; 7
 452:	60 f4       	brcc	.+24     	; 0x46c <SetLamp+0x20>
    SetLamps(1 << (Lamp - 1));  // Set the bit pattern for the Lamps
 454:	28 2f       	mov	r18, r24
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	21 50       	subi	r18, 0x01	; 1
 45a:	30 40       	sbci	r19, 0x00	; 0
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	02 c0       	rjmp	.+4      	; 0x466 <SetLamp+0x1a>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	2a 95       	dec	r18
 468:	e2 f7       	brpl	.-8      	; 0x462 <SetLamp+0x16>
 46a:	01 c0       	rjmp	.+2      	; 0x46e <SetLamp+0x22>
  else
    SetLamps(0);
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	ca df       	rcall	.-108    	; 0x404 <SetLamps>
 470:	08 95       	ret

00000472 <Timer_Init>:
 */
void Timer_Init(void)
{
  // Timer 0, 36kHz pulses using CTC mode and pin toggle while blasting.  Tick is Xtal/8 = 400nS.

  TCCR0A = 1 << WGM01;
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	84 bd       	out	0x24, r24	; 36
  TCCR0B = (1 << CS01);           // Prescaler divide by 8 = 3MHz/333nS tick
 476:	85 bd       	out	0x25, r24	; 37
  OCR0A  = 39;                  // 36kHz from 3MHz clock
 478:	97 e2       	ldi	r25, 0x27	; 39
 47a:	97 bd       	out	0x27, r25	; 39
  OCR0B  = 39;                  // 36kHz from 3MHz clock
 47c:	98 bd       	out	0x28, r25	; 40
  TIMSK0 = (1 << OCIE0A);       // 36kHz interrupt for use on LED PWM
 47e:	80 93 6e 00 	sts	0x006E, r24

  // Timer 1, normal mode. Tick is Xtal/8 = 400nS period for maximum delay of 26mS

  TCCR1A = 0;
 482:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = (1 << CS11);                                 // Prescaler divide by 8 = 2.5MHz/400nS tick
 486:	80 93 81 00 	sts	0x0081, r24
  TIMSK1 =  (1 << OCIE1A) | (1 << OCIE1B);              // Enable delay
 48a:	86 e0       	ldi	r24, 0x06	; 6
 48c:	80 93 6f 00 	sts	0x006F, r24
  TIFR1 =   (1 << OCF1A) | (1 << OCF1B) | (1 << ICF1);  // Clear off interrupt flags
 490:	86 e2       	ldi	r24, 0x26	; 38
 492:	86 bb       	out	0x16, r24	; 22
  OCR1B = OCR1B + 2500;                                 // Reload for next tick, 2500 x 400nS = 1mS
 494:	ea e8       	ldi	r30, 0x8A	; 138
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	91 81       	ldd	r25, Z+1	; 0x01
 49c:	8c 53       	subi	r24, 0x3C	; 60
 49e:	96 4f       	sbci	r25, 0xF6	; 246
 4a0:	91 83       	std	Z+1, r25	; 0x01
 4a2:	80 83       	st	Z, r24
}
 4a4:	08 95       	ret

000004a6 <__vector_12>:
  Timer 1 output compare B interrupt service

  This timer is used for a 1mS periodic interrupt.
 */
ISR(TIMER1_COMPB_vect)
{
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
  OCR1B = OCR1B + 2500;   // Reload for next tick, 2500 x 400nS = 1mS
 4b4:	80 91 8a 00 	lds	r24, 0x008A
 4b8:	90 91 8b 00 	lds	r25, 0x008B
 4bc:	8c 53       	subi	r24, 0x3C	; 60
 4be:	96 4f       	sbci	r25, 0xF6	; 246
 4c0:	90 93 8b 00 	sts	0x008B, r25
 4c4:	80 93 8a 00 	sts	0x008A, r24

  // Timer user for DelayMS

  if (CountDown)
 4c8:	80 91 15 01 	lds	r24, 0x0115
 4cc:	90 91 16 01 	lds	r25, 0x0116
 4d0:	00 97       	sbiw	r24, 0x00	; 0
 4d2:	49 f0       	breq	.+18     	; 0x4e6 <__vector_12+0x40>
    CountDown--;
 4d4:	80 91 15 01 	lds	r24, 0x0115
 4d8:	90 91 16 01 	lds	r25, 0x0116
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	90 93 16 01 	sts	0x0116, r25
 4e2:	80 93 15 01 	sts	0x0115, r24

  // Timer used for Timer_Clear and Timer_Read

  CountUp++;
 4e6:	80 91 13 01 	lds	r24, 0x0113
 4ea:	90 91 14 01 	lds	r25, 0x0114
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	90 93 14 01 	sts	0x0114, r25
 4f4:	80 93 13 01 	sts	0x0113, r24

  // Do count down for RS485 transmit stop

  if (RS485TXDrop)
 4f8:	80 91 0f 01 	lds	r24, 0x010F
 4fc:	90 91 10 01 	lds	r25, 0x0110
 500:	00 97       	sbiw	r24, 0x00	; 0
 502:	91 f0       	breq	.+36     	; 0x528 <__vector_12+0x82>
    if (!--RS485TXDrop) {
 504:	80 91 0f 01 	lds	r24, 0x010F
 508:	90 91 10 01 	lds	r25, 0x0110
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	90 93 10 01 	sts	0x0110, r25
 512:	80 93 0f 01 	sts	0x010F, r24
 516:	80 91 0f 01 	lds	r24, 0x010F
 51a:	90 91 10 01 	lds	r25, 0x0110
 51e:	00 97       	sbiw	r24, 0x00	; 0
 520:	19 f4       	brne	.+6      	; 0x528 <__vector_12+0x82>
      ClearBit (RS485DEPort, RS485DE);      // Turn off RS485 driver
 522:	5c 98       	cbi	0x0b, 4	; 11
      BCTXBusy = false;
 524:	10 92 09 01 	sts	0x0109, r1
    }

  // Do count down for RS485 receive timeout

  if (RS485RXTimeout)
 528:	80 91 11 01 	lds	r24, 0x0111
 52c:	90 91 12 01 	lds	r25, 0x0112
 530:	00 97       	sbiw	r24, 0x00	; 0
 532:	89 f0       	breq	.+34     	; 0x556 <__vector_12+0xb0>
    if (!--RS485RXTimeout) {
 534:	80 91 11 01 	lds	r24, 0x0111
 538:	90 91 12 01 	lds	r25, 0x0112
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	90 93 12 01 	sts	0x0112, r25
 542:	80 93 11 01 	sts	0x0111, r24
 546:	80 91 11 01 	lds	r24, 0x0111
 54a:	90 91 12 01 	lds	r25, 0x0112
 54e:	00 97       	sbiw	r24, 0x00	; 0
 550:	11 f4       	brne	.+4      	; 0x556 <__vector_12+0xb0>
      BCRXPos = 0;                          // Dump any data and start again
 552:	10 92 06 01 	sts	0x0106, r1
    }
}
 556:	9f 91       	pop	r25
 558:	8f 91       	pop	r24
 55a:	0f 90       	pop	r0
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	0f 90       	pop	r0
 560:	1f 90       	pop	r1
 562:	18 95       	reti

00000564 <DelayMS>:

  This routine will delay for the supplied number of milliseconds.
 */
void DelayMS(Uint16 Time)
{
  CountDown = Time;   // CountDown is decremented in ISR every millisecond
 564:	90 93 16 01 	sts	0x0116, r25
 568:	80 93 15 01 	sts	0x0115, r24
  while(CountDown);
 56c:	80 91 15 01 	lds	r24, 0x0115
 570:	90 91 16 01 	lds	r25, 0x0116
 574:	00 97       	sbiw	r24, 0x00	; 0
 576:	d1 f7       	brne	.-12     	; 0x56c <DelayMS+0x8>
}
 578:	08 95       	ret

0000057a <Timer_Clear>:

  This routine clears the 1mS timer.
 */
void Timer_Clear(void)
{
  CountUp = 0;
 57a:	10 92 14 01 	sts	0x0114, r1
 57e:	10 92 13 01 	sts	0x0113, r1
}
 582:	08 95       	ret

00000584 <Timer_Read>:

  This routine reads the current value of the 1mS timer.
 */
Uint16 Timer_Read(void)
{
  return CountUp;
 584:	20 91 13 01 	lds	r18, 0x0113
 588:	30 91 14 01 	lds	r19, 0x0114
}
 58c:	c9 01       	movw	r24, r18
 58e:	08 95       	ret

00000590 <__vector_14>:
  Timer 0 output compare A interrupt service

  This timer is used for PWM timing.
 */
ISR(TIMER0_COMPA_vect)
{
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1

}
 59a:	0f 90       	pop	r0
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	0f 90       	pop	r0
 5a0:	1f 90       	pop	r1
 5a2:	18 95       	reti

000005a4 <__vector_11>:
  Timer 1 output compare A interrupt service

  This timer is used for IR send bit timing.
 */
ISR(TIMER1_COMPA_vect)
{
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1

}
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <_exit>:
 5b8:	f8 94       	cli

000005ba <__stop_program>:
 5ba:	ff cf       	rjmp	.-2      	; 0x5ba <__stop_program>
